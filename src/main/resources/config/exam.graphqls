scalar Date

type Mutation {
	 addAcademicExamSetting(input: [AddAcademicExamSettingInput]): AddAcademicExamSettingPayload
     updateAcademicExamSetting(input: UpdateAcademicExamSettingInput): UpdateAcademicExamSettingPayload
     removeAcademicExamSetting(input: RemoveAcademicExamSettingInput): RemoveAcademicExamSettingPayload

     addTypeOfGrading(input: [AddTypeOfGradingInput]): AddTypeOfGradingPayload
     updateTypeOfGrading(input: UpdateTypeOfGradingInput): UpdateTypeOfGradingPayload
     removeTypeOfGrading(input: RemoveTypeOfGradingInput): RemoveTypeOfGradingPayload

         addCompetitiveExam(input:AddCompetitiveExamInput):AddCompetitiveExamPayload
         updateCompetitiveExam(input:UpdateCompetitiveExamInput):UpdateCompetitiveExamPayload
         removeCompetitiveExam(input:RemoveCompetitiveExamInput):RemoveCompetitiveExamPayload

        addStudentExamReport(input: AddStudentExamReportInput): AddStudentExamReportPayload
        updateStudentExamReport(input: UpdateStudentExamReportInput): UpdateStudentExamReportPayload
        removeStudentExamReport(input: RemoveStudentExamReportInput): RemoveStudentExamReportPayload

}

type Query {
  academicExamSetting(id: Long):AcademicExamSetting
  academicExamSettings: [AcademicExamSetting]

  typeOfGrading(id: Int): TypeOfGrading
  typeOfGradings:[TypeOfGrading]

  studentExamReport(id: Long): StudentExamReport
  studentExamReports: [StudentExamReport]

  competitiveExam (id: Long): CompetitiveExam
  competitiveExams: [CompetitiveExam]

}

type AcademicExamSetting{
    id: Long
    examName: String
    semester: String
    examDate: Date
    startTime: String
    endTime: String
    gradeType: String
    total: Int
    passing: Int
    actions: String
    groupvalue: Long
    countvalue: Long
    branchId: Long
    subjectId: Long
    departmentId: Long
    academicyearId: Long
    sectionId: Long
    batchId: Long
    typeOfGrading: TypeOfGrading
}

type TypeOfGrading{
    id: Long
    minMarks: Int
    maxMarks: Int
    grades: String
    groupvalue: Long
}

type CompetitiveExam{
    id: Long
    testName: String
    testScore: Int
    enrollmentNo: Long
    rank: Long
    studentId: Long
 }

type StudentExamReport{
    id: Long
    marksObtained: Int
    comments: String
    gOp: Int
    studentId: Long
    academicExamSetting: AcademicExamSetting
    typeOfGrading: TypeOfGrading
    academicyearId: Long
    batchId: Long
    departmentId: Long
    subjectId: Long
    sectionId: Long
}

input AddAcademicExamSettingInput{
    examName: String
    semester: String
    examDate: Date
    startTime: String
    endTime: String
    gradeType: String
    total: Int
    passing: Int
    actions: String
    countvalue: Long
    groupvalue: Long
    departmentId: Long
    sectionId: Long
    subjectId: Long
    academicyearId: Long
    batchId: Long
    branchId: Long
    typeOfGradingId: Long
}

type AddAcademicExamSettingPayload {
    academicExamSetting: AcademicExamSetting
}
input UpdateAcademicExamSettingInput {
    id: Long
    examName: String
    semester: String
    examDate: Date
    startTime: String
    endTime: String
    gradeType: String
    total: Int
    passing: Int
    actions: String
    groupvalue: Long
    departmentId: Long
    sectionId: Long
    subjectId: Long
    academicyearId: Long
    batchId: Long
    branchId: Long
    typeOfGradingId: Long
}

type UpdateAcademicExamSettingPayload {
    academicExamSetting: AcademicExamSetting
}
input RemoveAcademicExamSettingInput {
   academicExamSettingId: Long
}
type RemoveAcademicExamSettingPayload {
    academicExamSettings: [ AcademicExamSetting]
}

input AddTypeOfGradingInput{
    minMarks: Int
    maxMarks: Int
    grades: String
}

type AddTypeOfGradingPayload {
    typeOfGrading: TypeOfGrading
}
input UpdateTypeOfGradingInput {
    id: Long
    minMarks: Int
    maxMarks: Int
    grades: String
    groupvalue: Long
}

type UpdateTypeOfGradingPayload {
    typeOfGrading: TypeOfGrading
}
input RemoveTypeOfGradingInput {
   typeOfGradingId: Long
}
type RemoveTypeOfGradingPayload {
    typeOfGradings: [ TypeOfGrading]
}
input AddStudentExamReportInput{
        marksObtained: Int
        comments: String
        gOp: Int
        studentId: Long
        academicExamSettingId: Long
        typeOfGradingId: Long
        academicyearId: Long
        batchId: Long
        departmentId:Long
        sectionId:Long
        subjectId:Long
}

type AddStudentExamReportPayload {
    studentExamReport: StudentExamReport
}
input UpdateStudentExamReportInput {
    id: Long
    marksObtained: Int
    comments: String
    gOp: Int
    studentId: Long
    academicExamSettingId: Long
    typeOfGradingId: Long
    academicyearId: Long
    batchId: Long
    departmentId:Long
    sectionId:Long
    subjectId:Long
}

type UpdateStudentExamReportPayload {
    studentExamReport: StudentExamReport
}
input RemoveStudentExamReportInput {
   studentExamReportId: Long
}
type RemoveStudentExamReportPayload {
    studentExamReports: [ StudentExamReport]
}

input AddCompetitiveExamInput{
    testName: String
    testScore: Int
    enrollmentNo: Long
    rank: Long
    studentId: Long
}

type AddCompetitiveExamPayload {
    competitiveExam: CompetitiveExam
}
input UpdateCompetitiveExamInput {
        id: Long
        testName: String
        testScore: Int
        enrollmentNo: Long
        rank: Long
        studentId: Long
}

type UpdateCompetitiveExamPayload {
    competitiveExam: CompetitiveExam
}
input RemoveCompetitiveExamInput {
   competitiveExamId: Long
}
type RemoveCompetitiveExamPayload {
    competitiveExams: [ CompetitiveExam]
}

