scalar Date

type Mutation {
	 addAcademicExamSetting(input: [AddAcademicExamSettingInput]): AddAcademicExamSettingPayload
     updateAcademicExamSetting(input: UpdateAcademicExamSettingInput): UpdateAcademicExamSettingPayload
     removeAcademicExamSetting(input: RemoveAcademicExamSettingInput): RemoveAcademicExamSettingPayload

     addTypeOfGrading(input: [AddTypeOfGradingInput]): AddTypeOfGradingPayload
     updateTypeOfGrading(input: UpdateTypeOfGradingInput): UpdateTypeOfGradingPayload
     removeTypeOfGrading(input: RemoveTypeOfGradingInput): RemoveTypeOfGradingPayload

     addCompetitiveExam(input:AddCompetitiveExamInput):AddCompetitiveExamPayload
     updateCompetitiveExam(input:UpdateCompetitiveExamInput):UpdateCompetitiveExamPayload
     removeCompetitiveExam(input:RemoveCompetitiveExamInput):RemoveCompetitiveExamPayload

     addStudentExamReport(input: AddStudentExamReportInput): AddStudentExamReportPayload
     updateStudentExamReport(input: UpdateStudentExamReportInput): UpdateStudentExamReportPayload
     removeStudentExamReport(input: RemoveStudentExamReportInput): RemoveStudentExamReportPayload

     getExamList(filter: ExamListFilterInput): [CmsAcademicExamSettingVo]
}

type Query {
  academicExamSetting(id: Long):AcademicExamSetting
  academicExamSettings: [AcademicExamSetting]

  typeOfGrading(id: Int): TypeOfGrading
  typeOfGradings:[TypeOfGrading]

  studentExamReport(id: Long): StudentExamReport
  studentExamReports: [StudentExamReport]

  competitiveExam (id: Long): CompetitiveExam
  competitiveExams: [CompetitiveExam]

  searchAcademicExamSetting(sectionId:Long, subjectId:Long, departmentId:Long, batchId:Long, branchId:Long, semester: String, examName: String): [CmsAcademicExamSettingVo]
  createExamFilterDataCache(branchId: Long, departmentId: Long, academicYearId: Long): ExamFilterDataCache
}

type AcademicExamSetting{
    id: Long
    examName: String
    semester: String
    examDate: Date
    startTime: String
    endTime: String
    gradeType: String
    total: Int
    passing: Int
    actions: String
    groupvalue: Long
    countvalue: Long
    branchId: Long
    subjectId: Long
    departmentId: Long
    academicyearId: Long
    sectionId: Long
    batchId: Long
    typeOfGrading: TypeOfGrading
}

type TypeOfGrading{
    id: Long
    minMarks: Int
    maxMarks: Int
    grades: String
    groupvalue: Long
}

type CompetitiveExam{
    id: Long
    testName: String
    testScore: Int
    enrollmentNo: Long
    rank: Long
    studentId: Long
 }

type StudentExamReport{
    id: Long
    marksObtained: Int
    comments: String
    gOp: Int
    studentId: Long
    academicExamSetting: AcademicExamSetting
    typeOfGrading: TypeOfGrading
    academicyearId: Long
    batchId: Long
    departmentId: Long
    subjectId: Long
    sectionId: Long
}

input AddAcademicExamSettingInput{
    examName: String
    semester: String
    examDate: Date
    startTime: String
    endTime: String
    gradeType: String
    total: Int
    passing: Int
    actions: String
    countvalue: Long
    groupvalue: Long
    departmentId: Long
    sectionId: Long
    subjectId: Long
    academicyearId: Long
    batchId: Long
    branchId: Long
    typeOfGradingId: Long
}

type AddAcademicExamSettingPayload {
    academicExamSetting: AcademicExamSetting
}
input UpdateAcademicExamSettingInput {
    id: Long
    examName: String
    semester: String
    examDate: Date
    startTime: String
    endTime: String
    gradeType: String
    total: Int
    passing: Int
    actions: String
    groupvalue: Long
    departmentId: Long
    sectionId: Long
    subjectId: Long
    academicyearId: Long
    batchId: Long
    branchId: Long
    typeOfGradingId: Long
}

type UpdateAcademicExamSettingPayload {
    academicExamSetting: AcademicExamSetting
}
input RemoveAcademicExamSettingInput {
   academicExamSettingId: Long
}
type RemoveAcademicExamSettingPayload {
    academicExamSettings: [ AcademicExamSetting]
}

input AddTypeOfGradingInput{
    minMarks: Int
    maxMarks: Int
    grades: String
}

type AddTypeOfGradingPayload {
    typeOfGrading: TypeOfGrading
}
input UpdateTypeOfGradingInput {
    id: Long
    minMarks: Int
    maxMarks: Int
    grades: String
    groupvalue: Long
}

type UpdateTypeOfGradingPayload {
    typeOfGrading: TypeOfGrading
}
input RemoveTypeOfGradingInput {
   typeOfGradingId: Long
}
type RemoveTypeOfGradingPayload {
    typeOfGradings: [ TypeOfGrading]
}
input AddStudentExamReportInput{
        marksObtained: Int
        comments: String
        gOp: Int
        studentId: Long
        academicExamSettingId: Long
        typeOfGradingId: Long
        academicyearId: Long
        batchId: Long
        departmentId:Long
        sectionId:Long
        subjectId:Long
}

type AddStudentExamReportPayload {
    studentExamReport: StudentExamReport
}
input UpdateStudentExamReportInput {
    id: Long
    marksObtained: Int
    comments: String
    gOp: Int
    studentId: Long
    academicExamSettingId: Long
    typeOfGradingId: Long
    academicyearId: Long
    batchId: Long
    departmentId:Long
    sectionId:Long
    subjectId:Long
}

type UpdateStudentExamReportPayload {
    studentExamReport: StudentExamReport
}
input RemoveStudentExamReportInput {
   studentExamReportId: Long
}
type RemoveStudentExamReportPayload {
    studentExamReports: [ StudentExamReport]
}

input AddCompetitiveExamInput{
    testName: String
    testScore: Int
    enrollmentNo: Long
    rank: Long
    studentId: Long
}

type AddCompetitiveExamPayload {
    competitiveExam: CompetitiveExam
}
input UpdateCompetitiveExamInput {
        id: Long
        testName: String
        testScore: Int
        enrollmentNo: Long
        rank: Long
        studentId: Long
}

 type UpdateCompetitiveExamPayload {
    competitiveExam: CompetitiveExam
 }
 input RemoveCompetitiveExamInput {
   competitiveExamId: Long
 }
 type RemoveCompetitiveExamPayload {
    competitiveExams: [ CompetitiveExam]
 }

 input ExamListFilterInput {
      branchId:String
  	  departmentId:String
	  batchId: String
	  sectionId: String
	  subjectId: String
 }

 type CmsAcademicExamSettingVo {
  id: Long
  examName: String
  semester: String
  examDate: Date
  strexamDate: String
  day: String
  duration: String
  startTime: String
  gradeType: String
  endTime: String
  total: Int
  passing: Int
  actions: String
  groupValue: Long
  countValue: Long
  departmentId: Long
  batchId: Long
  sectionId: Long
  branchId: Long
  academicyearId: Long
  subjectId: Long
  academicyear: AcademicYear
  subject: Subject
  branch: Branch
  department: Department
  section : Section
  batch : Batch
 }

  type AcademicYear {
	id:	Long
	description: String
	startDate: Date
	endDate: Date
	comments: String
	createdBy: String
	createdOn: Date
	updatedBy: String
	updatedOn: Date
	status: String
 }

  type Section {
	id: Long
    section: String
    batch: Batch
   }

  type Batch {
	id:	Long
	batch: 	String
	department:	Department
}

type Department {
	id:	Long
	name: String
	description: String
	deptHead: String
	comments: String
	createdBy: String
	createdOn: Date
	updatedBy: String
	updatedOn: Date
	status: String
	branch: Branch
	academicYear: AcademicYear
}

type Branch {
	id:	Long
	branchName: String
	address: String
	pinCode: String
	branchHead: String
	cellPhoneNo: String
	landLinePhoneNo: String
	emailId: String
	faxNo: String
	isMainBranch: String
	startDate: Date
	createdBy: String
	createdOn:    Date
	updatedBy:          String
	updatedOn:          Date
	status:             String
	college:            College
	city:               City
	state:              State
}

type State {
	id:				Long
	stateName:      String
	divisionType:   String
	stateCode:      String
	country:        Country
}

type City {
	id:			Long
	cityName:   String
	cityCode:   String
	stdCode:    String
	state:      State
}

type College {
	id:					Long
	collegeName:        String
	logoFilePath:       String
	logoFileName:       String
	logoFileExtension:  String
	createdBy:          String
	createdOn:          Date
	updatedBy:          String
	updatedOn:          Date
	status:             String
	country:            Country
}

type Country {
	id:				Long
	countryName:    String
	countryCode:    String
	isdCode:        String
}

type Subject{
    id: Long
    subjectCode: String
    subjectType: String
    subjectDesc: String
    status: String
    department:	Department
    batch: Batch
  }

type ExamFilterDataCache {
    branches: [Branch]
	departments: [Department]
	batches: [Batch]
	sections: [Section]
	subjects: [Subject]
	academicExamSettings : [CmsAcademicExamSettingVo]
}
